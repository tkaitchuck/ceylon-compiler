package com.redhat.ceylon.compiler.java.test.structure.constructor;

@.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 8)
@.com.redhat.ceylon.compiler.java.metadata.Class(constructors = true)
class CtorDelegationClassRefsSuper implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType {
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public static final .com.redhat.ceylon.compiler.java.test.structure.constructor.CtorDelegationClassRefsSuper.Super Super = null;
    
    @.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 8)
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public static final class Super {
        
        private Super() {
        }
    }
    
    @.ceylon.language.SharedAnnotation$annotation$
    @.com.redhat.ceylon.compiler.java.metadata.Name("Super")
    public CtorDelegationClassRefsSuper(@.com.redhat.ceylon.compiler.java.metadata.Ignore
    .com.redhat.ceylon.compiler.java.test.structure.constructor.CtorDelegationClassRefsSuper.Super $name$) {
        .com.redhat.ceylon.compiler.java.test.structure.constructor.checker_.get_().note("Super");
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .com.redhat.ceylon.compiler.java.test.structure.constructor.CtorDelegationClassRefsSuper.$TypeDescriptor$;
    }
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor$ = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.structure.constructor.CtorDelegationClassRefsSuper.class);
}
@.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 8)
@.com.redhat.ceylon.compiler.java.metadata.Class(
        constructors = true,
        extendsType = "com.redhat.ceylon.compiler.java.test.structure.constructor::CtorDelegationClassRefsSuper")
class CtorDelegationClassRefs extends .com.redhat.ceylon.compiler.java.test.structure.constructor.CtorDelegationClassRefsSuper {
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    private static final .com.redhat.ceylon.compiler.java.test.structure.constructor.CtorDelegationClassRefs.Abstract Abstract = null;
    
    @.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 8)
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    private static final class Abstract {
        
        private Abstract() {
        }
    }
    
    @.ceylon.language.AbstractAnnotation$annotation$
    @.com.redhat.ceylon.compiler.java.metadata.Name("Abstract")
    private CtorDelegationClassRefs(@.com.redhat.ceylon.compiler.java.metadata.Ignore
    .com.redhat.ceylon.compiler.java.test.structure.constructor.CtorDelegationClassRefs.Abstract $name$) {
        super(.com.redhat.ceylon.compiler.java.test.structure.constructor.CtorDelegationClassRefsSuper.Super);
        .com.redhat.ceylon.compiler.java.test.structure.constructor.checker_.get_().note("1");
        .com.redhat.ceylon.compiler.java.test.structure.constructor.checker_.get_().note("Abstract");
    }
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    private static final .com.redhat.ceylon.compiler.java.test.structure.constructor.CtorDelegationClassRefs.Concrete$delegation$ Concrete$delegation$ = null;
    
    @.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 8)
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    private static final class Concrete$delegation$ {
        
        private Concrete$delegation$() {
        }
    }
    
    @.ceylon.language.SharedAnnotation$annotation$
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    private CtorDelegationClassRefs(@.com.redhat.ceylon.compiler.java.metadata.Ignore
    .com.redhat.ceylon.compiler.java.test.structure.constructor.CtorDelegationClassRefs.Concrete$delegation$ $name$) {
        this(.com.redhat.ceylon.compiler.java.test.structure.constructor.CtorDelegationClassRefs.Abstract);
        .com.redhat.ceylon.compiler.java.test.structure.constructor.checker_.get_().note("2");
        .com.redhat.ceylon.compiler.java.test.structure.constructor.checker_.get_().note("Concrete");
    }
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public static final .com.redhat.ceylon.compiler.java.test.structure.constructor.CtorDelegationClassRefs.Concrete Concrete = null;
    
    @.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 8)
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public static final class Concrete {
        
        private Concrete() {
        }
    }
    
    @.ceylon.language.SharedAnnotation$annotation$
    @.com.redhat.ceylon.compiler.java.metadata.Name("Concrete")
    public CtorDelegationClassRefs(@.com.redhat.ceylon.compiler.java.metadata.Ignore
    .com.redhat.ceylon.compiler.java.test.structure.constructor.CtorDelegationClassRefs.Concrete $name$) {
        this(.com.redhat.ceylon.compiler.java.test.structure.constructor.CtorDelegationClassRefs.Abstract);
        .com.redhat.ceylon.compiler.java.test.structure.constructor.checker_.get_().note("2");
        $return$$0: do {
            .com.redhat.ceylon.compiler.java.test.structure.constructor.checker_.get_().note("Concrete");
        }         while (false);
        .com.redhat.ceylon.compiler.java.test.structure.constructor.checker_.get_().note("3");
        .com.redhat.ceylon.compiler.java.test.structure.constructor.checker_.get_().note("4");
    }
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public static final .com.redhat.ceylon.compiler.java.test.structure.constructor.CtorDelegationClassRefs.Concrete2 Concrete2 = null;
    
    @.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 8)
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public static final class Concrete2 {
        
        private Concrete2() {
        }
    }
    
    @.ceylon.language.SharedAnnotation$annotation$
    @.com.redhat.ceylon.compiler.java.metadata.Name("Concrete2")
    public CtorDelegationClassRefs(@.com.redhat.ceylon.compiler.java.metadata.Ignore
    .com.redhat.ceylon.compiler.java.test.structure.constructor.CtorDelegationClassRefs.Concrete2 $name$) {
        this(.com.redhat.ceylon.compiler.java.test.structure.constructor.CtorDelegationClassRefs.Concrete$delegation$);
        .com.redhat.ceylon.compiler.java.test.structure.constructor.checker_.get_().note("3");
        $return$$1: do {
            .com.redhat.ceylon.compiler.java.test.structure.constructor.checker_.get_().note("Concrete2");
        }         while (false);
        .com.redhat.ceylon.compiler.java.test.structure.constructor.checker_.get_().note("4");
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .com.redhat.ceylon.compiler.java.test.structure.constructor.CtorDelegationClassRefs.$TypeDescriptor$;
    }
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor$ = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.structure.constructor.CtorDelegationClassRefs.class);
}
@.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 8)
@.com.redhat.ceylon.compiler.java.metadata.Method
final class runCtorDelegationClassRefs_ {
    
    private runCtorDelegationClassRefs_() {
    }
    
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Anything")
    static void runCtorDelegationClassRefs() {
        .com.redhat.ceylon.compiler.java.test.structure.constructor.checker_.get_().reset();
        .ceylon.language.Callable<? extends .com.redhat.ceylon.compiler.java.test.structure.constructor.CtorDelegationClassRefs> ref = new .com.redhat.ceylon.compiler.java.language.AbstractCallable<.com.redhat.ceylon.compiler.java.test.structure.constructor.CtorDelegationClassRefs>(.com.redhat.ceylon.compiler.java.test.structure.constructor.CtorDelegationClassRefs.$TypeDescriptor$, .ceylon.language.Empty.$TypeDescriptor$, "CtorDelegationClassRefs.Concrete()", (short)-1){
            
            @.java.lang.Override
            @.com.redhat.ceylon.compiler.java.metadata.Ignore
            public .com.redhat.ceylon.compiler.java.test.structure.constructor.CtorDelegationClassRefs $call$() {
                return new .com.redhat.ceylon.compiler.java.test.structure.constructor.CtorDelegationClassRefs(.com.redhat.ceylon.compiler.java.test.structure.constructor.CtorDelegationClassRefs.Concrete);
            }
        };
        .com.redhat.ceylon.compiler.java.test.structure.constructor.checker_.get_().check("[]");
        ref.$call$();
        .com.redhat.ceylon.compiler.java.test.structure.constructor.checker_.get_().check("[Super, 1, Abstract, 2, Concrete, 3, 4]");
        .com.redhat.ceylon.compiler.java.test.structure.constructor.checker_.get_().reset();
        ref = new .com.redhat.ceylon.compiler.java.language.AbstractCallable<.com.redhat.ceylon.compiler.java.test.structure.constructor.CtorDelegationClassRefs>(.com.redhat.ceylon.compiler.java.test.structure.constructor.CtorDelegationClassRefs.$TypeDescriptor$, .ceylon.language.Empty.$TypeDescriptor$, "CtorDelegationClassRefs.Concrete2()", (short)-1){
            
            @.java.lang.Override
            @.com.redhat.ceylon.compiler.java.metadata.Ignore
            public .com.redhat.ceylon.compiler.java.test.structure.constructor.CtorDelegationClassRefs $call$() {
                return new .com.redhat.ceylon.compiler.java.test.structure.constructor.CtorDelegationClassRefs(.com.redhat.ceylon.compiler.java.test.structure.constructor.CtorDelegationClassRefs.Concrete2);
            }
        };
        .com.redhat.ceylon.compiler.java.test.structure.constructor.checker_.get_().check("[]");
        ref.$call$();
        .com.redhat.ceylon.compiler.java.test.structure.constructor.checker_.get_().check("[Super, 1, Abstract, 2, Concrete, 3, Concrete2, 4]");
    }
}
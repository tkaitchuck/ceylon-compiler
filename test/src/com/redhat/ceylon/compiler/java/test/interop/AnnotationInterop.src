package com.redhat.ceylon.compiler.java.test.interop;

@.javax.annotation.Generated({
        "Some",
        "code generator name"})
@.com.redhat.ceylon.compiler.java.test.interop.JavaAnnotationPrimitives(
        b = true,
        o = (byte)8L,
        s = (short)16L,
        i = (int)32L,
        l = 64L,
        f = (float)32.0,
        d = 64.0,
        str = "",
        ba = {true},
        oa = {(byte)8L},
        sa = {(short)16L},
        ia = {(int)32L},
        la = {64L},
        fa = {(float)32.0},
        da = {64.0},
        stra = {""})
@.com.redhat.ceylon.compiler.java.test.interop.JavaAnnotationClass(
        clas = .java.lang.String.class,
        classRaw = .java.lang.String.class,
        classWithBound = .java.lang.Exception.class,
        classExact = .java.lang.String.class,
        classes = {
                .java.lang.String.class,
                boolean.class,
                .ceylon.language.Sequential.class},
        classesRaw = {
                .java.lang.String.class,
                boolean.class,
                .ceylon.language.Sequential.class},
        classesWithBound = {
                .java.lang.Exception.class,
                .ceylon.language.AssertionError.class},
        classesExact = {.java.lang.String.class})
@.com.redhat.ceylon.compiler.java.test.interop.JavaAnnotationEnum(
        threadState = .java.lang.Thread.State.NEW,
        threadStates = {
                .java.lang.Thread.State.RUNNABLE,
                .java.lang.Thread.State.BLOCKED})
@.com.redhat.ceylon.compiler.java.test.interop.JavaAnnotationAnnotation(
        annotation = @.com.redhat.ceylon.compiler.java.test.interop.JavaAnnotationEnum(
                threadState = .java.lang.Thread.State.NEW,
                threadStates = {
                        .java.lang.Thread.State.RUNNABLE,
                        .java.lang.Thread.State.BLOCKED}),
        annotations = {@.com.redhat.ceylon.compiler.java.test.interop.JavaAnnotationEnum(
                threadState = .java.lang.Thread.State.NEW,
                threadStates = {
                        .java.lang.Thread.State.RUNNABLE,
                        .java.lang.Thread.State.BLOCKED})})
@.com.redhat.ceylon.compiler.java.test.interop.JAVAAnnotationAcronym
@.com.redhat.ceylon.compiler.java.test.interop.javaAnnotationLowercase
class AnnotationInterop implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType {
    
    AnnotationInterop() {
        this.tom = "";
    }
    private .java.lang.String tom;
    
    @.javax.annotation.Resource(
            name = "tom",
            type = .com.redhat.ceylon.compiler.java.test.interop.AnnotationInterop.class,
            authenticationType = .javax.annotation.Resource.AuthenticationType.APPLICATION)
    @.ceylon.language.SharedAnnotation$annotation$
    @.ceylon.language.VariableAnnotation$annotation$
    public final .java.lang.String getTom() {
        return tom;
    }
    
    public final void setTom(final .java.lang.String tom) {
        this.tom = tom;
    }
    
    @.javax.annotation.PostConstruct
    @.ceylon.language.SharedAnnotation$annotation$
    public final void afterConstrution() {
    }
    
    @.javax.annotation.PreDestroy
    @.ceylon.language.SharedAnnotation$annotation$
    public final void beforeDestruction() {
    }
    
    @.java.lang.Override
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .com.redhat.ceylon.compiler.java.test.interop.AnnotationInterop.$TypeDescriptor$;
    }
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor$ = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.interop.AnnotationInterop.class);
}
@.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 8)
@.com.redhat.ceylon.compiler.java.metadata.Class(constructors = true)
class CPAnnoTest2 implements .com.redhat.ceylon.compiler.java.runtime.model.ReifiedType {
    
    @.javax.annotation.Generated({"by you"})
    @.ceylon.language.SharedAnnotation$annotation$
    public CPAnnoTest2(@.com.redhat.ceylon.compiler.java.metadata.Name("x")
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::String")
    @.javax.annotation.Generated({"by me"})
    final .java.lang.String x$param$) {
    }
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public static final .com.redhat.ceylon.compiler.java.test.interop.CPAnnoTest2.other_ other_ = null;
    
    @.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 8)
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public static final class other_ {
        
        private other_() {
        }
    }
    
    @.ceylon.language.SharedAnnotation$annotation$
    @.com.redhat.ceylon.compiler.java.metadata.Name("other")
    public CPAnnoTest2(@.com.redhat.ceylon.compiler.java.metadata.Ignore
    .com.redhat.ceylon.compiler.java.test.interop.CPAnnoTest2.other_ $name$, @.com.redhat.ceylon.compiler.java.metadata.Name("x")
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::String")
    @.javax.annotation.Generated({"by me"})
    final .java.lang.String x$param$) {
    }
    
    @.java.lang.Override
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $getType$() {
        return .com.redhat.ceylon.compiler.java.test.interop.CPAnnoTest2.$TypeDescriptor$;
    }
    @.com.redhat.ceylon.compiler.java.metadata.Ignore
    public static final .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor $TypeDescriptor$ = .com.redhat.ceylon.compiler.java.runtime.model.TypeDescriptor.klass(.com.redhat.ceylon.compiler.java.test.interop.CPAnnoTest2.class);
}
@.com.redhat.ceylon.compiler.java.metadata.Ceylon(major = 8)
@.com.redhat.ceylon.compiler.java.metadata.Method
final class bug2103_ {
    
    private bug2103_() {
    }
    
    @.javax.annotation.Generated({.java.util.jar.JarFile.MANIFEST_NAME})
    @.com.redhat.ceylon.compiler.java.metadata.TypeInfo("ceylon.language::Anything")
    static void bug2103() {
    }
}